#include "bb.hpp"

namespace bb_magic_moves { 

const bitboard_t r_mask[NB_BRD_SQR] = {
    (0x000101010101017E), (0x000202020202027C), (0x000404040404047A), (0x0008080808080876), (0x001010101010106E), (0x002020202020205E), (0x004040404040403E), (0x008080808080807E),
    (0x0001010101017E00), (0x0002020202027C00), (0x0004040404047A00), (0x0008080808087600), (0x0010101010106E00), (0x0020202020205E00), (0x0040404040403E00), (0x0080808080807E00),
    (0x00010101017E0100), (0x00020202027C0200), (0x00040404047A0400), (0x0008080808760800), (0x00101010106E1000), (0x00202020205E2000), (0x00404040403E4000), (0x00808080807E8000),
    (0x000101017E010100), (0x000202027C020200), (0x000404047A040400), (0x0008080876080800), (0x001010106E101000), (0x002020205E202000), (0x004040403E404000), (0x008080807E808000),
    (0x0001017E01010100), (0x0002027C02020200), (0x0004047A04040400), (0x0008087608080800), (0x0010106E10101000), (0x0020205E20202000), (0x0040403E40404000), (0x0080807E80808000),
    (0x00017E0101010100), (0x00027C0202020200), (0x00047A0404040400), (0x0008760808080800), (0x00106E1010101000), (0x00205E2020202000), (0x00403E4040404000), (0x00807E8080808000),
    (0x007E010101010100), (0x007C020202020200), (0x007A040404040400), (0x0076080808080800), (0x006E101010101000), (0x005E202020202000), (0x003E404040404000), (0x007E808080808000),
    (0x7E01010101010100), (0x7C02020202020200), (0x7A04040404040400), (0x7608080808080800), (0x6E10101010101000), (0x5E20202020202000), (0x3E40404040404000), (0x7E80808080808000)}; 

const bitboard_t r_magic[NB_BRD_SQR] = {
    0xa8002c000108020ULL,  0x6c00049b0002001ULL,  0x100200010090040ULL,  0x2480041000800801ULL, 0x280028004000800ULL,  0x900410008040022ULL,  0x280020001001080ULL,  0x2880002041000080ULL, 
    0xa000800080400034ULL, 0x4808020004000ULL,    0x2290802004801000ULL, 0x411000d00100020ULL,  0x402800800040080ULL,  0xb000401004208ULL,    0x2409000100040200ULL, 0x1002100004082ULL, 
    0x22878001e24000ULL,   0x1090810021004010ULL, 0x801030040200012ULL,  0x500808008001000ULL,  0xa08018014000880ULL,  0x8000808004000200ULL, 0x201008080010200ULL,  0x801020000441091ULL, 
    0x800080204005ULL,     0x1040200040100048ULL, 0x120200402082ULL,     0xd14880480100080ULL,  0x12040280080080ULL,   0x100040080020080ULL,  0x9020010080800200ULL, 0x813241200148449ULL, 
    0x491604001800080ULL,  0x100401000402001ULL,  0x4820010021001040ULL, 0x400402202000812ULL,  0x209009005000802ULL,  0x810800601800400ULL,  0x4301083214000150ULL, 0x204026458e001401ULL,
    0x40204000808000ULL,   0x8001008040010020ULL, 0x8410820820420010ULL, 0x1003001000090020ULL, 0x804040008008080ULL,  0x12000810020004ULL,   0x1000100200040208ULL, 0x430000a044020001ULL, 
    0x280009023410300ULL,  0xe0100040002240ULL,   0x200100401700ULL,     0x2244100408008080ULL, 0x8000400801980ULL,    0x2000810040200ULL,    0x8010100228810400ULL, 0x2000009044210200ULL, 
    0x4080008040102101ULL, 0x40002080411d01ULL,   0x2005524060000901ULL, 0x502001008400422ULL,  0x489a000810200402ULL, 0x1004400080a13ULL,    0x4000011008020084ULL, 0x26002114058042ULL };

const int r_index[NB_BRD_SQR] = {
    12, 11, 11, 11, 11, 11, 11, 12,
    11, 10, 10, 10, 10, 10, 10, 11,
    11, 10, 10, 10, 10, 10, 10, 11,
    11, 10, 10, 10, 10, 10, 10, 11,
    11, 10, 10, 10, 10, 10, 10, 11,
    11, 10, 10, 10, 10, 10, 10, 11,
    11, 10, 10, 10, 10, 10, 10, 11,
    12, 11, 11, 11, 11, 11, 11, 12};

const bitboard_t b_mask[NB_BRD_SQR] = {
    (0x0040201008040200), (0x0000402010080400), (0x0000004020100A00), (0x0000000040221400), (0x0000000002442800), (0x0000000204085000), (0x0000020408102000), (0x0002040810204000),
    (0x0020100804020000), (0x0040201008040000), (0x00004020100A0000), (0x0000004022140000), (0x0000000244280000), (0x0000020408500000), (0x0002040810200000), (0x0004081020400000),
    (0x0010080402000200), (0x0020100804000400), (0x004020100A000A00), (0x0000402214001400), (0x0000024428002800), (0x0002040850005000), (0x0004081020002000), (0x0008102040004000),
    (0x0008040200020400), (0x0010080400040800), (0x0020100A000A1000), (0x0040221400142200), (0x0002442800284400), (0x0004085000500800), (0x0008102000201000), (0x0010204000402000),
    (0x0004020002040800), (0x0008040004081000), (0x00100A000A102000), (0x0022140014224000), (0x0044280028440200), (0x0008500050080400), (0x0010200020100800), (0x0020400040201000),
    (0x0002000204081000), (0x0004000408102000), (0x000A000A10204000), (0x0014001422400000), (0x0028002844020000), (0x0050005008040200), (0x0020002010080400), (0x0040004020100800),
    (0x0000020408102000), (0x0000040810204000), (0x00000A1020400000), (0x0000142240000000), (0x0000284402000000), (0x0000500804020000), (0x0000201008040200), (0x0000402010080400),
    (0x0002040810204000), (0x0004081020400000), (0x000A102040000000), (0x0014224000000000), (0x0028440200000000), (0x0050080402000000), (0x0020100804020000), (0x0040201008040200)};

const bitboard_t b_magic[NB_BRD_SQR] = {
    0x89a1121896040240ULL, 0x2004844802002010ULL, 0x2068080051921000ULL, 0x62880a0220200808ULL, 0x4042004000000ULL,    0x100822020200011ULL,  0xc00444222012000aULL, 0x28808801216001ULL, 
    0x400492088408100ULL,  0x201c401040c0084ULL,  0x840800910a0010ULL,   0x82080240060ULL,      0x2000840504006000ULL, 0x30010c4108405004ULL, 0x1008005410080802ULL, 0x8144042209100900ULL, 
    0x208081020014400ULL,  0x4800201208ca00ULL,   0xf18140408012008ULL,  0x1004002802102001ULL, 0x841000820080811ULL,  0x40200200a42008ULL,   0x800054042000ULL,     0x88010400410c9000ULL, 
    0x520040470104290ULL,  0x1004040051500081ULL, 0x2002081833080021ULL, 0x400c00c010142ULL,    0x941408200c002000ULL, 0x658810000806011ULL,  0x188071040440a00ULL,  0x4800404002011c00ULL, 
    0x104442040404200ULL,  0x511080202091021ULL,  0x4022401120400ULL,    0x80c0040400080120ULL, 0x8040010040820802ULL, 0x480810700020090ULL,  0x102008e00040242ULL,  0x809005202050100ULL,
    0x8002024220104080ULL, 0x431008804142000ULL,  0x19001802081400ULL,   0x200014208040080ULL,  0x3308082008200100ULL, 0x41010500040c020ULL,  0x4012020c04210308ULL, 0x208220a202004080ULL, 
    0x111040120082000ULL,  0x6803040141280a00ULL, 0x2101004202410000ULL, 0x8200000041108022ULL, 0x21082088000ULL,      0x2410204010040ULL,    0x40100400809000ULL,   0x822088220820214ULL, 
    0x40808090012004ULL,   0x910224040218c9ULL,   0x402814422015008ULL,  0x90014004842410ULL,   0x1000042304105ULL,    0x10008830412a00ULL,   0x2520081090008908ULL, 0x40102000a0a60140ULL};

const int b_index[NB_BRD_SQR] = {
    6, 5, 5, 5, 5, 5, 5, 6,
    5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 7, 7, 7, 7, 5, 5,
    5, 5, 7, 9, 9, 7, 5, 5,
    5, 5, 7, 9, 9, 7, 5, 5,
    5, 5, 7, 7, 7, 7, 5, 5,
    5, 5, 5, 5, 5, 5, 5, 5,
    6, 5, 5, 5, 5, 5, 5, 6};

static bitboard_t generate_r_moves(square_t sq, bitboard_t blockers) {
    bitboard_t attacks = NULL_64; 

    // North 
    attacks |= RAYS_BB[NORTH][sq];
    if (RAYS_BB[NORTH][sq] & blockers) {
        attacks &= ~RAYS_BB[NORTH][bb::lsb(RAYS_BB[NORTH][sq] & blockers)]; 
    }

    // South 
    attacks |= RAYS_BB[SOUTH][sq]; 
    if (RAYS_BB[SOUTH][sq] & blockers) {
        attacks &= ~RAYS_BB[SOUTH][bb::msb(RAYS_BB[SOUTH][sq] & blockers)]; 
    }    

    // East 
    attacks |= RAYS_BB[EAST][sq]; 
    if (RAYS_BB[EAST][sq] & blockers) {
        attacks &= ~RAYS_BB[EAST][bb::lsb(RAYS_BB[EAST][sq] & blockers)]; 
    }    

    // West 
    attacks |= RAYS_BB[WEST][sq]; 
    if (RAYS_BB[WEST][sq] & blockers) {
        attacks &= ~RAYS_BB[WEST][bb::msb(RAYS_BB[WEST][sq] & blockers)]; 
    }    

    return attacks; 
}

static bitboard_t generate_b_moves(square_t sq, bitboard_t blockers) {
    bitboard_t attacks = NULL_64; 

    // North East
    attacks |= RAYS_BB[NORTH_EAST][sq]; 
    if (RAYS_BB[NORTH_EAST][sq] & blockers) {
        attacks &= ~RAYS_BB[NORTH_EAST][bb::lsb(RAYS_BB[NORTH_EAST][sq] & blockers)]; 
    }

    // North West
    attacks |= RAYS_BB[NORTH_WEST][sq]; 
    if (RAYS_BB[NORTH_WEST][sq] & blockers) {
        attacks &= ~RAYS_BB[NORTH_WEST][bb::lsb(RAYS_BB[NORTH_WEST][sq] & blockers)]; 
    }

     // South East
    attacks |= RAYS_BB[SOUTH_EAST][sq]; 
    if (RAYS_BB[SOUTH_EAST][sq] & blockers) {
        attacks &= ~RAYS_BB[SOUTH_EAST][bb::msb(RAYS_BB[SOUTH_EAST][sq] & blockers)]; 
    }
    // South West
    attacks |= RAYS_BB[SOUTH_WEST][sq]; 
    if (RAYS_BB[SOUTH_WEST][sq] & blockers) {
        attacks &= ~RAYS_BB[SOUTH_WEST][bb::msb(RAYS_BB[SOUTH_WEST][sq] & blockers)]; 
    }

    return attacks; 
}

bitboard_t r_table[NB_BRD_SQR][4096]; 
bitboard_t b_table[NB_BRD_SQR][512];

void init() {
    // for all square 
    int m = 0; 
    for (square_t sq = A1; sq <= H8; sq++) {
        // for all possible blockers for this square
        for (int blocker_idx = 0; blocker_idx < (1 << r_index[sq]); blocker_idx++) {
            bitboard_t blockers = NULL_64; 
            bitboard_t mask = r_mask[sq]; 
            int bits = bb::pop_count(mask); 
            for (int i = 0; i < bits; i++) {
                square_t bitPos = bb::pop_bit(&mask); 
                if (blocker_idx & (1 << i))
                    blockers |= (1ULL << bitPos); 
            }
            int key = (blockers * r_magic[sq]) >> (64-r_index[sq]); 
            m = std::max(m,key); 
            assert(key >= 0 && key < 4096); 
            r_table[sq][key] = generate_r_moves(sq,blockers);    
        }
    }
    std::cout << "max for rook " << m << std::endl; 

    m = 0; 
    for (square_t sq = A1; sq <= H8; sq++) {
        // for all possible blockers for this square
        for (int blocker_idx = 0; blocker_idx < (1 << b_index[sq]); blocker_idx++) {
            bitboard_t blockers = NULL_64; 
            bitboard_t mask = b_mask[sq]; 
            int bits = bb::pop_count(mask); 
            for (int i = 0; i < bits; i++) {
                square_t bitPos = bb::pop_bit(&mask); 
                if (blocker_idx & (1 << i))
                    blockers |= (1ULL << bitPos); 
            }
            int key = (blockers * b_magic[sq]) >> (64-b_index[sq]); 
            m = std::max(m,key); 
            assert(key >= 0 && key < 512); 
            b_table[sq][key] = generate_b_moves(sq,blockers);    
        }
    }
    std::cout << "max for bishop " << m << std::endl; 
}
}